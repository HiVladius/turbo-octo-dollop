name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  # Job de testing y linting
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint --if-present
      
      - name: Run type check
        run: npm run type-check --if-present
      
      - name: Run tests
        run: npm run test --if-present
      
      - name: Build project
        run: npm run build
        env:
          VITE_EMAIL_SERVICE: ${{ secrets.MY_EMAIL_SERVICE }}
          VITE_EMAIL_TO: ${{ secrets.MY_EMAIL_TO }}
          VITE_EMAIL_PASS: ${{ secrets.MY_EMAIL_PASS }}

  # Job de security scan
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level high
        continue-on-error: true
      
      - name: Check for vulnerabilities
        run: npm audit --audit-level critical

  # Job de performance check
  lighthouse:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        env:
          VITE_EMAIL_SERVICE: ${{ secrets.MY_EMAIL_SERVICE }}
          VITE_EMAIL_TO: ${{ secrets.MY_EMAIL_TO }}
          VITE_EMAIL_PASS: ${{ secrets.MY_EMAIL_PASS }}
      
      - name: Serve and run Lighthouse
        run: |
          npm install -g lighthouse
          npx serve -s dist -p 3000 &
          sleep 5
          lighthouse http://localhost:3000 --chrome-flags="--headless" --output=json --output-path=./lighthouse-results.json
        continue-on-error: true

  # Job de deploy a Firebase
  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    # Solo ejecutar en push a main (no en PRs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project for production
        run: npm run build
        env:
          VITE_EMAIL_SERVICE: ${{ secrets.MY_EMAIL_SERVICE }}
          VITE_EMAIL_TO: ${{ secrets.MY_EMAIL_TO }}
          VITE_EMAIL_PASS: ${{ secrets.MY_EMAIL_PASS }}
      
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PORFOLIO_VLAD }}
          projectId: portfolio-896a3
          channelId: live

  # Job de deploy preview para PRs
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test]
    # Solo ejecutar en PRs a main
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project for preview
        run: npm run build
        env:
          VITE_EMAIL_SERVICE: ${{ secrets.MY_EMAIL_SERVICE }}
          VITE_EMAIL_TO: ${{ secrets.MY_EMAIL_TO }}
          VITE_EMAIL_PASS: ${{ secrets.MY_EMAIL_PASS }}
      
      - name: Deploy preview to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PORFOLIO_VLAD }}
          projectId: porfolio-vlad
          expires: 30d
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
